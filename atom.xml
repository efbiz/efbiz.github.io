<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EFbiz</title>
  <subtitle>Everything For business</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/efbiz/"/>
  <updated>2017-08-15T08:00:18.284Z</updated>
  <id>https://github.com/efbiz/</id>
  
  <author>
    <name>joni@efbiz.org</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式定时任务调度系统技术选型</title>
    <link href="https://github.com/efbiz/2017/08/15/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%96%B9%E6%A1%88%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/"/>
    <id>https://github.com/efbiz/2017/08/15/分布式定时任务方案技术选型/</id>
    <published>2017-08-15T00:57:41.000Z</published>
    <updated>2017-08-15T08:00:18.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们先思考下面几个业务场景的解决方案"><a href="#我们先思考下面几个业务场景的解决方案" class="headerlink" title="我们先思考下面几个业务场景的解决方案:"></a>我们先思考下面几个业务场景的解决方案:</h1><ul>
<li>支付系统每天凌晨1点跑批，进行一天清算，每月1号进行上个月清算</li>
<li>电商整点抢购，商品价格8点整开始优惠</li>
<li>12306购票系统，超过30分钟没有成功支付订单的，进行回收处理</li>
<li>商品成功发货后，需要向客户发送短信提醒</li>
</ul>
<blockquote>
<p>类似的业务场景非常多，我们怎么解决？</p>
</blockquote>
<a id="more"></a>
<h1 id="为什么我们需要定时任务"><a href="#为什么我们需要定时任务" class="headerlink" title="为什么我们需要定时任务"></a>为什么我们需要定时任务</h1><p>很多业务场景需要我们某一特定的时刻去做某件任务，定时任务解决的就是这种业务场景。一般来说，系统可以使用消息传递代替部分定时任务，两者有很多相似之处，可以相互替换场景。如，上面发货成功发短信通知客户的业务场景，我们可以在发货成功后发送MQ消息到队列，然后去消费mq消息，发送短信。<br>但在某些场景下不能互换：</p>
<blockquote>
<p>a)时间驱动/事件驱动：内部系统一般可以通过时间来驱动，但涉及到外部系统，则只能使用时间驱动。如怕取外部网站价格，每小时爬一次<br>b)批量处理/逐条处理：批量处理堆积的数据更加高效，在不需要实时性的情况下比消息中间件更有优势。而且有的业务逻辑只能批量处理。如移动每个月结算我们的话费<br>c)实时性/非实时性：消息中间件能够做到实时处理数据，但是有些情况下并不需要实时，比如：vip升级<br>d)系统内部/系统解耦：定时任务调度一般是在系统内部，而消息中间件可用于两个系统间</p>
</blockquote>
<h1 id="java有哪些定时任务的框架"><a href="#java有哪些定时任务的框架" class="headerlink" title="java有哪些定时任务的框架"></a>java有哪些定时任务的框架</h1><h2 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h2><ul>
<li>timer：是一个定时器类，通过该类可以为指定的定时任务进行配置。TimerTask类是一个定时任务类，该类实现了Runnable接口，缺点异常未检查会中止线程</li>
<li>ScheduledExecutorService：相对延迟或者周期作为定时任务调度，缺点没有绝对的日期或者时间</li>
<li>spring定时框架：配置简单功能较多，如果系统使用单机的话可以优先考虑spring定时器</li>
</ul>
<h2 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h2><ul>
<li>Quartz：Java事实上的定时任务标准。但Quartz关注点在于定时任务而非数据，并无一套根据数据处理而定制化的流程。虽然Quartz可以基于数据库实现作业的高可用，但缺少分布式并行调度的功能</li>
<li>TBSchedule：阿里早期开源的分布式任务调度系统。代码略陈旧，使用timer而非线程池执行任务调度。众所周知，timer在处理异常状况时是有缺陷的。而且TBSchedule作业类型较为单一，只能是获取/处理数据一种模式。还有就是文档缺失比较严重</li>
<li>elastic-job：当当开发的弹性分布式任务调度系统，功能丰富强大，采用zookeeper实现分布式协调，实现任务高可用以及分片，目前是版本2.15，并且可以支持云开发</li>
<li>Saturn：是唯品会自主研发的分布式的定时任务的调度平台，基于当当的elastic-job 版本1开发，并且可以很好的部署到docker容器上。</li>
<li>xxl-job: 是大众点评员工徐雪里于2015年发布的分布式任务调度平台，是一个轻量级分布式任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</li>
</ul>
<h1 id="分布式任务调度系统对比"><a href="#分布式任务调度系统对比" class="headerlink" title="分布式任务调度系统对比"></a>分布式任务调度系统对比</h1><blockquote>
<p>参与对比的可选系统方案： elastic——job （以下简称E-Job）与 xxx-job(以下简称X-Job)</p>
</blockquote>
<h2 id="项目背景及社区力量"><a href="#项目背景及社区力量" class="headerlink" title="项目背景及社区力量"></a>项目背景及社区力量</h2><p><em>X-Job</em>　：　大众点评公司下员工许雪里、贡献者 3人;　github有2470star、1015fork　|　QQ讨论群6个　|　有登记在使用的超过40家公司　|　文档齐全<br><em>E-Job</em>　：　当当网开源，贡献者17人;　github有2524star、1015fork　|　QQ讨论群１个、源码讨论群１个　|　有登记在使用的超过50家公司　|　文档齐全　｜　有明确的发展计划</p>
<h2 id="支持集群部署"><a href="#支持集群部署" class="headerlink" title="支持集群部署"></a>支持集群部署</h2><p><em>X-Job</em>　：　集群部署唯一要求为：保证每个集群节点配置（db和登陆账号等）保持一致。调度中心通过db配置区分不同集群。</p>
<blockquote>
<p>执行器支持集群部署，提升调度系统可用性，同时提升任务处理能力。集群部署唯一要求为：保证集群中每个执行器的配置项 “xxl.job.admin.addresses/调度中心地址” 保持一致，执行器根据该配置进行执行器自动注册等操作。</p>
</blockquote>
<p><em>E-Job</em>　：　重写Quartz基于数据库的分布式功能，改用Zookeeper实现注册中心</p>
<blockquote>
<p>作业注册中心： 基于Zookeeper和其客户端Curator实现的全局作业注册控制中心。用于注册，控制和协调分布式作业执行。</p>
</blockquote>
<h2 id="多节点部署时任务不能重复执行"><a href="#多节点部署时任务不能重复执行" class="headerlink" title="多节点部署时任务不能重复执行"></a>多节点部署时任务不能重复执行</h2><p><em>X-Job</em>　：　使用Quartz基于数据库的分布式功能<br><em>E-Job</em>　 ：　将任务拆分为n个任务项后，各个服务器分别执行各自分配到的任务项。一旦有新的服务器加入集群，或现有服务器下线，elastic-job将在保留本次任务执行不变的情况下，下次任务开始前触发任务重分片。</p>
<h2 id="日志可追溯"><a href="#日志可追溯" class="headerlink" title="日志可追溯"></a>日志可追溯</h2><p><em>X-Job</em>　：　支持，有日志查询界面<br><em>E-Job</em>　：　可通过事件订阅的方式处理调度过程的重要事件，用于查询、统计和监控。Elastic-Job目前提供了基于关系型数据库两种事件订阅方式记录事件。</p>
<h2 id="监控告警"><a href="#监控告警" class="headerlink" title="监控告警"></a>监控告警</h2><p><em>X-Job</em>　：　调度失败时，将会触发失败报警，如发送报警邮件。</p>
<blockquote>
<p>任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔</p>
</blockquote>
<p><em>E-Job</em>　：　通过事件订阅方式可自行实现</p>
<blockquote>
<p>作业运行状态监控、监听作业服务器存活、监听近期数据处理成功、数据流类型作业（可通过监听近期数据处理成功数判断作业流量是否正常,如果小于作业正常处理的阀值，可选择报警。）、监听近期数据处理失败（可通过监听近期数据处理失败数判断作业处理结果，如果大于0，可选择报警。）</p>
</blockquote>
<h2 id="弹性扩容缩容"><a href="#弹性扩容缩容" class="headerlink" title="弹性扩容缩容"></a>弹性扩容缩容</h2><p><em>X-Job</em>　：　使用Quartz基于数据库的分布式功能，服务器超出一定数量会给数据库造成一定的压力<br><em>E-Job</em>　：　通过zk实现各服务的注册、控制及协调</p>
<h2 id="支持并行调度"><a href="#支持并行调度" class="headerlink" title="支持并行调度"></a>支持并行调度</h2><p><em>X-Job</em>　：　调度系统多线程（默认10个线程）触发调度运行，确保调度精确执行，不被堵塞。<br><em>E-Job</em>　：　采用任务分片方式实现。将一个任务拆分为n个独立的任务项，由分布式的服务器并行执行各自分配到的分片项。</p>
<h2 id="高可用策略"><a href="#高可用策略" class="headerlink" title="高可用策略"></a>高可用策略</h2><p><em>X-Job</em>　：　“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；<br><em>E-Job</em>　：　调度器的高可用是通过运行几个指向同一个ZooKeeper集群的Elastic-Job-Cloud-Scheduler实例来实现的。ZooKeeper用于在当前主Elastic-Job-Cloud-Scheduler实例失败的情况下执行领导者选举。通过至少两个调度器实例来构成集群，集群中只有一个调度器实例提供服务，其他实例处于”待命”状态。当该实例失败时，集群会选举剩余实例中的一个来继续提供服务。</p>
<h2 id="失败处理策略"><a href="#失败处理策略" class="headerlink" title="失败处理策略"></a>失败处理策略</h2><p><em>X-Job</em>　：　调度失败时的处理策略，策略包括：失败告警（默认）、失败重试；<br><em>E-Job</em>　：　弹性扩容缩容在下次作业运行前重分片，但本次作业执行的过程中，下线的服务器所分配的作业将不会重新被分配。失效转移功能可以在本次作业运行中用空闲服务器抓取孤儿作业分片执行。同样失效转移功能也会牺牲部分性能。</p>
<h2 id="动态分片策略"><a href="#动态分片策略" class="headerlink" title="动态分片策略"></a>动态分片策略</h2><p><em>X-Job</em>　：　分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</p>
<blockquote>
<p>执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发对应集群中所有执行器执行一次任务，同时传递分片参数；可根据分片参数开发分片任务；</p>
</blockquote>
<p><em>E-Job</em>　：　支持多种分片策略，可自定义分片策略</p>
<blockquote>
<p>默认包含三种分片策略： 基于平均分配算法的分片策略、 作业名的哈希值奇偶数决定IP升降序算法的分片策略、根据作业名的哈希值对Job实例列表进行轮转的分片策略，支持自定义分片策略</p>
<p>elastic-job的分片是通过zookeeper来实现的。分片的分片由主节点分配，如下三种情况都会触发主节点上的分片算法执行：<br>a、新的Job实例加入集群<br>b、现有的Job实例下线（如果下线的是leader节点，那么先选举然后触发分片算法的执行）<br>c、主节点选举”</p>
</blockquote>
<h2 id="和quartz框架对比"><a href="#和quartz框架对比" class="headerlink" title="和quartz框架对比"></a>和quartz框架对比</h2><ul>
<li>调用API的的方式操作任务，不人性化； </li>
<li>需要持久化业务QuartzJobBean到底层数据表中，系统侵入性相当严重。 </li>
<li>调度逻辑和QuartzJobBean耦合在同一个项目中，这将导致一个问题，在调度任务数量逐渐增多，同时调度任务逻辑逐渐加重的情况加，此时调度系统的性能将大大受限于业务；</li>
<li>Quartz关注点在于定时任务而非数据，并无一套根据数据处理而定制化的流程。虽然Quartz可以基于数据库实现作业的高可用，但缺少分布式并行调度的功能。</li>
</ul>
<h1 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h1><p><img src="MicroServiceJob.png" alt=""> </p>
<h1 id="总结和结论"><a href="#总结和结论" class="headerlink" title="总结和结论"></a>总结和结论</h1><p>  共同点： E-Job和X-job都有广泛的用户基础和完整的技术文档，都能满足定时任务的基本功能需求。<br>  不同点<br>  X-Job 侧重的业务实现的简单和管理的方便，学习成本简单，失败策略和路由策略丰富。推荐使用在“用户基数相对少，服务器数量在一定范围内”的情景下使用<br>  E-Job 关注的是数据，增加了弹性扩容和数据分片的思路，以便于更大限度的利用分布式服务器的资源。但是学习成本相对高些，推荐在“数据量庞大，且部署服务器数量较多”时使用</p>
<h1 id="附-定时任务的其他方案"><a href="#附-定时任务的其他方案" class="headerlink" title="附 定时任务的其他方案"></a>附 定时任务的其他方案</h1><p>发货后超过10天未收货时系统自动确认收货的多种实现方式</p>
<blockquote>
<p>每天定时半夜筛选第二天 可以自动确认收货的订单,然后第二天 每10分钟 执行一次确认收货 开销不会太大吧 时间也相对精确</p>
<p>自动确认收货这个状态如果仅仅是让客户端看的话，等用户下一次上线的时间，做一次运算就可以了。</p>
<p>延迟和定时消息投递<br>ActiveMQ提供了一种broker端消息定时调度机制。适用于：1、不希望消息马上被broker投递出去，而是想要消息60秒以后发给消费者，2、想让消息没隔一定时间投递一次，一共投递指定的次数<br>RabbitMQ可以针对Queue和Message设置 x-message-tt，来控制消息的生存时间，如果超时，则消息变为dead letter。利用DLX，当消息在一个队列中变成死信后，它能被重新publish到另一个Exchange。这时候消息就可以重新被消费。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我们先思考下面几个业务场景的解决方案&quot;&gt;&lt;a href=&quot;#我们先思考下面几个业务场景的解决方案&quot; class=&quot;headerlink&quot; title=&quot;我们先思考下面几个业务场景的解决方案:&quot;&gt;&lt;/a&gt;我们先思考下面几个业务场景的解决方案:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支付系统每天凌晨1点跑批，进行一天清算，每月1号进行上个月清算&lt;/li&gt;
&lt;li&gt;电商整点抢购，商品价格8点整开始优惠&lt;/li&gt;
&lt;li&gt;12306购票系统，超过30分钟没有成功支付订单的，进行回收处理&lt;/li&gt;
&lt;li&gt;商品成功发货后，需要向客户发送短信提醒&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;类似的业务场景非常多，我们怎么解决？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="微服务" scheme="https://github.com/efbiz/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="定时任务" scheme="https://github.com/efbiz/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
      <category term="分布式架构" scheme="https://github.com/efbiz/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="微服务" scheme="https://github.com/efbiz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="定时任务" scheme="https://github.com/efbiz/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java设计6大原则</title>
    <link href="https://github.com/efbiz/2017/08/11/Java%E8%AE%BE%E8%AE%A16%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>https://github.com/efbiz/2017/08/11/Java设计6大原则/</id>
    <published>2017-08-11T08:57:38.000Z</published>
    <updated>2017-08-15T09:04:00.582Z</updated>
    
    <content type="html"><![CDATA[<p>一 ： 类单一职责原则：</p>
<pre><code>一个类只有一个引起这个类变化的原因。即一个类只完成一个功能，如果做不到一个类只完成一个功能，最少要保证一个方法只完成一个功能。
</code></pre><p>二：依赖倒置原则：</p>
<pre><code>高层组件应该依赖抽象而不依赖具体，即面向接口编程，一般依赖的成员变量或者参数都应该是抽象的不应该是具体的。
</code></pre><p>三：里氏代换原则：</p>
<pre><code>凡是父类出现的地方都可以用子类代替并且原功能没有发生变化，子类不应该覆盖父类的非抽象方法。
</code></pre><p>四：迪米特法则：</p>
<pre><code>一个类要尽量的封装自己，一个类只与自己的朋友类打交道一般朋友类是成员变量或者参数，非朋友类一般都是局部变量
</code></pre><p>五：接口隔离原则：</p>
<pre><code>一个接口完成的功能尽可能的单一，不要让一个接口承担过多的责任。
</code></pre><p>六：开闭原则：</p>
<pre><code>对扩展开放，对修改闭合
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一 ： 类单一职责原则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一个类只有一个引起这个类变化的原因。即一个类只完成一个功能，如果做不到一个类只完成一个功能，最少要保证一个方法只完成一个功能。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二：依赖倒置原则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;高层组件
    
    </summary>
    
    
      <category term="Java设计" scheme="https://github.com/efbiz/tags/Java%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计原理</title>
    <link href="https://github.com/efbiz/2017/08/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    <id>https://github.com/efbiz/2017/08/06/领域驱动设计原理/</id>
    <published>2017-08-06T12:57:41.000Z</published>
    <updated>2017-08-07T07:10:22.535Z</updated>
    
    <content type="html"><![CDATA[<p>使用领域驱动设计的业务价值<br>1、你获得了一个非常有用的领域模型<br>2、你的业务得到了更准确的定义和理解<br>3、领域专家可以为软件设计做出贡献<br>4、更好的用户体验<br>5、清晰的模型边界<br>6、更好的企业架构<br>7、敏捷、迭代式和持续建模<br>8、使用战略和战术新工具</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用领域驱动设计的业务价值&lt;br&gt;1、你获得了一个非常有用的领域模型&lt;br&gt;2、你的业务得到了更准确的定义和理解&lt;br&gt;3、领域专家可以为软件设计做出贡献&lt;br&gt;4、更好的用户体验&lt;br&gt;5、清晰的模型边界&lt;br&gt;6、更好的企业架构&lt;br&gt;7、敏捷、迭代式和持续建模&lt;br&gt;
    
    </summary>
    
      <category term="领域驱动设计" scheme="https://github.com/efbiz/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="模式、原理与实践" scheme="https://github.com/efbiz/categories/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/%E6%A8%A1%E5%BC%8F%E3%80%81%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="领域驱动设计" scheme="https://github.com/efbiz/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="领域驱动设计模式" scheme="https://github.com/efbiz/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="领域驱动设计原理与实践" scheme="https://github.com/efbiz/tags/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
